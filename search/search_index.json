{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"API/","text":"API DOCUMENTATION API - OPEN LEVEL STATS METHOD URL ACTION STATUS GET /stats/active-users-count gets total active users count DONE GET /stats/active-partners-count gets total active partners count DONE GET /stats/donations-count gets total donations count DONE GET /stats/donations-count/:donation-center-id gets total donations by center PENDING BLOG METHOD URL ACTION STATUS GET /blog/all-blogs gets all blogs PENDING API - ADMIN LEVEL METHOD URL ACTION STATUS POST /admin/signin validates admin credentials DONE POST /admin/auth authenticates admin credentials DONE POST /admin/signout invalidates admin credentials DONE GET /admin/users gets all users donation details DONE GET /admin/donation-centres gets all donation centres PENDING POST /admin/donation-centres adds new donation centre PENDING GET /admin/hospitals gets all hospitals PENDING POST /admin/hospitals adds new hospital PENDING API - USER LEVEL METHOD URL ACTION STATUS POST /user/signup adds new user DONE POST /user/signin validates user credentials DONE POST /user/auth authenticates user credentials DONE POST /user/signout invalidates user credentials DONE POST /user/update update user credentials DONE POST /user/delete delete user credentials DONE POST /user/gen-reset-password-link generates reset password link and mails to user DONE POST /user/reset-password resets password based on user input DONE GET /user/donation-details/:userId gets donation details of user by id DONE POST /user/donation-details/:userId add new donation for tracking DONE PUT /user/donation-details/:userId/update/:donationId update donation for tracking DONE API - PARTNER LEVEL METHOD URL ACTION STATUS POST /partner/signup adds new partner DONE POST /partner/signin validates partner credentials DONE POST /partner/auth authenticates partner credentials DONE POST /partner/signout invalidates partner credentials DONE POST /partner/gen-reset-password-link generates reset password link and mails to partner DONE POST /partner/reset-password resets password based on partner input DONE GET /partner/donation-details/:partnerId gets donation details of partner by id DONE POST /partner/donation-details/:partnerId add new donation for tracking DONE PUT /partner/donation-details/:partnerId/update/:donationId update donation for tracking DONE","title":"API"},{"location":"API/#api-documentation","text":"","title":"API DOCUMENTATION"},{"location":"API/#api-open-level","text":"","title":"API - OPEN LEVEL"},{"location":"API/#stats","text":"METHOD URL ACTION STATUS GET /stats/active-users-count gets total active users count DONE GET /stats/active-partners-count gets total active partners count DONE GET /stats/donations-count gets total donations count DONE GET /stats/donations-count/:donation-center-id gets total donations by center PENDING","title":"STATS"},{"location":"API/#blog","text":"METHOD URL ACTION STATUS GET /blog/all-blogs gets all blogs PENDING","title":"BLOG"},{"location":"API/#api-admin-level","text":"METHOD URL ACTION STATUS POST /admin/signin validates admin credentials DONE POST /admin/auth authenticates admin credentials DONE POST /admin/signout invalidates admin credentials DONE GET /admin/users gets all users donation details DONE GET /admin/donation-centres gets all donation centres PENDING POST /admin/donation-centres adds new donation centre PENDING GET /admin/hospitals gets all hospitals PENDING POST /admin/hospitals adds new hospital PENDING","title":"API - ADMIN LEVEL"},{"location":"API/#api-user-level","text":"METHOD URL ACTION STATUS POST /user/signup adds new user DONE POST /user/signin validates user credentials DONE POST /user/auth authenticates user credentials DONE POST /user/signout invalidates user credentials DONE POST /user/update update user credentials DONE POST /user/delete delete user credentials DONE POST /user/gen-reset-password-link generates reset password link and mails to user DONE POST /user/reset-password resets password based on user input DONE GET /user/donation-details/:userId gets donation details of user by id DONE POST /user/donation-details/:userId add new donation for tracking DONE PUT /user/donation-details/:userId/update/:donationId update donation for tracking DONE","title":"API - USER LEVEL"},{"location":"API/#api-partner-level","text":"METHOD URL ACTION STATUS POST /partner/signup adds new partner DONE POST /partner/signin validates partner credentials DONE POST /partner/auth authenticates partner credentials DONE POST /partner/signout invalidates partner credentials DONE POST /partner/gen-reset-password-link generates reset password link and mails to partner DONE POST /partner/reset-password resets password based on partner input DONE GET /partner/donation-details/:partnerId gets donation details of partner by id DONE POST /partner/donation-details/:partnerId add new donation for tracking DONE PUT /partner/donation-details/:partnerId/update/:donationId update donation for tracking DONE","title":"API - PARTNER LEVEL"},{"location":"DB/","text":"DB DOCUMENTATION MongoDB Database - project_blip Collections { users, partners, tokens, donations, faqs, blogs } First Party User Collection - users Schema { _id: ObjectId, firstName: String, lastName: String, username: String, email: String, isEmailVerified: Boolean, phone: String, isPhoneVerified: Boolean, password: String, role: String, createdAt: Date, updatedAt: Date, _v: 0 } Second and Third Party User Collection - partners Schema { _id: ObjectId, orgName: String, username: String, email: String, isEmailVerified: Boolean, phone: String, isPhoneVerified: Boolean, type: enum(\"Donation Center\", \"Hospital\"), address: { houseno: String, area_and_street: String, landmark: String, country: String, state: String, pincode: String, city_town_district: String, }, password: String, role: String, createdAt: Date, updatedAt: Date, _v: 0 } Tokens Collection - tokens Schema { _id: ObjectId, userId: ObjectId, _v: 0, createdAt: Date, tokens: [ { token: String, creation: Date, auth: enum(\"User\", \"Partner\", \"Admin\", \"User-Reset-Password\", \"Partner-Reset-Password\", \"User-Verify-Email\", \"User-Verify-Phone\"), _id: ObjectId } ], updatedAt: Date } Donations Collections - donations Schema { _id: ObjectId, partnerId: ObjectId, donorName: String, donorPhone: String, donorEmail: String, donationType: enum(\"Whole Blood\", \"Power Red\", \"Platelet\", \"Plasma\"), donationQuantity: String, donationDescription: String, donationStatus: enum(\"DONATED\", \"ASSIGNED\", \"SEPARATED\" \"TRANSFERRED\", \"REACHED\", \"TERMINATED\"), isAssigned: Boolean, userId: ObjectId, donationName: String, isUserArchived: Boolean, isPartnerArchived: Boolean, issues: [ { issueName: String, issueDescription: String, issueRaised: Date, }, ], donationId: String, createdAt: Date, updatedAt: Date, _v: 0 } FAQ Collectoins - faqs Schema { _id: ObjectId, question: String, answer: String, by: enum(\"User\", \"Partner\", \"Admin\"), name: String createdAt: Date, updatedAt: Date, _v: 0 } Blog Collections - blogs Schema { _id: ObjectId, title: String, context: String, content: String, author: String, cover: String, createdAt: Date, updatedAt: Date, _v: 0 }","title":"Database"},{"location":"DB/#db-documentation","text":"","title":"DB DOCUMENTATION"},{"location":"DB/#mongodb-database-project_blip","text":"Collections { users, partners, tokens, donations, faqs, blogs }","title":"MongoDB Database - project_blip"},{"location":"DB/#first-party-user-collection-users","text":"Schema { _id: ObjectId, firstName: String, lastName: String, username: String, email: String, isEmailVerified: Boolean, phone: String, isPhoneVerified: Boolean, password: String, role: String, createdAt: Date, updatedAt: Date, _v: 0 }","title":"First Party User Collection - users"},{"location":"DB/#second-and-third-party-user-collection-partners","text":"Schema { _id: ObjectId, orgName: String, username: String, email: String, isEmailVerified: Boolean, phone: String, isPhoneVerified: Boolean, type: enum(\"Donation Center\", \"Hospital\"), address: { houseno: String, area_and_street: String, landmark: String, country: String, state: String, pincode: String, city_town_district: String, }, password: String, role: String, createdAt: Date, updatedAt: Date, _v: 0 }","title":"Second and Third Party User Collection - partners"},{"location":"DB/#tokens-collection-tokens","text":"Schema { _id: ObjectId, userId: ObjectId, _v: 0, createdAt: Date, tokens: [ { token: String, creation: Date, auth: enum(\"User\", \"Partner\", \"Admin\", \"User-Reset-Password\", \"Partner-Reset-Password\", \"User-Verify-Email\", \"User-Verify-Phone\"), _id: ObjectId } ], updatedAt: Date }","title":"Tokens Collection - tokens"},{"location":"DB/#donations-collections-donations","text":"Schema { _id: ObjectId, partnerId: ObjectId, donorName: String, donorPhone: String, donorEmail: String, donationType: enum(\"Whole Blood\", \"Power Red\", \"Platelet\", \"Plasma\"), donationQuantity: String, donationDescription: String, donationStatus: enum(\"DONATED\", \"ASSIGNED\", \"SEPARATED\" \"TRANSFERRED\", \"REACHED\", \"TERMINATED\"), isAssigned: Boolean, userId: ObjectId, donationName: String, isUserArchived: Boolean, isPartnerArchived: Boolean, issues: [ { issueName: String, issueDescription: String, issueRaised: Date, }, ], donationId: String, createdAt: Date, updatedAt: Date, _v: 0 }","title":"Donations Collections - donations"},{"location":"DB/#faq-collectoins-faqs","text":"Schema { _id: ObjectId, question: String, answer: String, by: enum(\"User\", \"Partner\", \"Admin\"), name: String createdAt: Date, updatedAt: Date, _v: 0 }","title":"FAQ Collectoins - faqs"},{"location":"DB/#blog-collections-blogs","text":"Schema { _id: ObjectId, title: String, context: String, content: String, author: String, cover: String, createdAt: Date, updatedAt: Date, _v: 0 }","title":"Blog Collections - blogs"},{"location":"DEPLOY/","text":"DEPLOY API DEPLOY Steps Navigate to backend-blip directory. Add the changes made to Version Control staging. Commit the staged changes with a message. Push the committed code to heroku remote.( npm run start ) Code cd backend-blip git add . git commit -m \"commit message\" git push heroku main FRONTEND DEPLOY STEPS Navigate to frontend-blip directory. Add the changes made to Version Control staging. Commit the staged changes with a message. Push the committed code to heroku remote.( npm run prod ) Code cd frontend-blip git add . git commit -m \"commit message\" git push heroku main","title":"Deployment"},{"location":"DEPLOY/#deploy","text":"","title":"DEPLOY"},{"location":"DEPLOY/#api-deploy","text":"","title":"API DEPLOY"},{"location":"DEPLOY/#steps","text":"Navigate to backend-blip directory. Add the changes made to Version Control staging. Commit the staged changes with a message. Push the committed code to heroku remote.( npm run start )","title":"Steps"},{"location":"DEPLOY/#code","text":"cd backend-blip git add . git commit -m \"commit message\" git push heroku main","title":"Code"},{"location":"DEPLOY/#frontend-deploy","text":"","title":"FRONTEND DEPLOY"},{"location":"DEPLOY/#steps_1","text":"Navigate to frontend-blip directory. Add the changes made to Version Control staging. Commit the staged changes with a message. Push the committed code to heroku remote.( npm run prod )","title":"STEPS"},{"location":"DEPLOY/#code_1","text":"cd frontend-blip git add . git commit -m \"commit message\" git push heroku main","title":"Code"},{"location":"DEVELOP/","text":"DEVELOP API DEVELOP Steps Navigate to backend-blip directory. Install necessary packages using package.json . Start the development server. Code cd backend-blip npm install npm run dev FRONTEND DEVELOP STEPS Navigate to frontend-blip directory. Install necessary packages using package.json . Start the development server. Code cd frontend-blip npm install npm run serve","title":"Development"},{"location":"DEVELOP/#develop","text":"","title":"DEVELOP"},{"location":"DEVELOP/#api-develop","text":"","title":"API DEVELOP"},{"location":"DEVELOP/#steps","text":"Navigate to backend-blip directory. Install necessary packages using package.json . Start the development server.","title":"Steps"},{"location":"DEVELOP/#code","text":"cd backend-blip npm install npm run dev","title":"Code"},{"location":"DEVELOP/#frontend-develop","text":"","title":"FRONTEND DEVELOP"},{"location":"DEVELOP/#steps_1","text":"Navigate to frontend-blip directory. Install necessary packages using package.json . Start the development server.","title":"STEPS"},{"location":"DEVELOP/#code_1","text":"cd frontend-blip npm install npm run serve","title":"Code"}]}